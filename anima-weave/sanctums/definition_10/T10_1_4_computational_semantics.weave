-- import
basic.anima
--

-- graph
nodes {
    // 验证图三元组实现预期的计算语义
    // 构建一个具有明确计算目标的图：时间戳分析和字符串处理
    
    // 计算起点
    dataGenerator basic.Start          // 生成基础数据
    clockSource basic.GetTimestamp     // 获取时间戳
    
    // 计算核心：实现特定算法
    parityChecker basic.IsEven         // 奇偶性检查算法  
    textFormatter basic.StringFormatter // 文本格式化算法
    mathFormatter basic.FormatNumber   // 数学格式化算法
    
    // 计算终点：语义聚合
    semanticBuilder basic.CreatePrompt // 语义构建器
}

datas {
    // 实现特定的计算语义：
    // 1. 时间戳 → 奇偶性分析
    // 2. ID → 文本格式化  
    // 3. 时间戳 → 数学格式化
    // 4. 多源数据 → 语义聚合
    
    clockSource.timestamp -> parityChecker.number;      // 时间戳的数学分析
    clockSource.timestamp -> mathFormatter.number;      // 时间戳的格式化
    dataGenerator.execution_id -> textFormatter.input;  // ID的文本处理
    dataGenerator.execution_id -> semanticBuilder.name; // ID作为语义名称
    textFormatter.formatted -> semanticBuilder.content; // 格式化文本作为内容
}

controls {
    // 实现计算的时序语义：
    // 确保数据依赖关系和计算顺序的正确性
    
    // 启动阶段：并行初始化
    dataGenerator.signal -> clockSource.trigger;    // 启动时钟
    dataGenerator.signal -> textFormatter.trigger;  // 启动文本处理
    
    // 计算阶段：基于数据依赖的串行处理
    clockSource.done -> parityChecker.trigger;     // 时钟完成→奇偶检查
    clockSource.done -> mathFormatter.trigger;     // 时钟完成→数学格式化
    
    // 聚合阶段：收集所有计算结果
    parityChecker.done -> semanticBuilder.trigger; // 奇偶检查完成→语义构建
}
-- 