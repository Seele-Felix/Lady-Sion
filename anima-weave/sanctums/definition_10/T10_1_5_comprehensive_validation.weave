-- import
basic.anima
--

-- graph
nodes {
    // 综合验证图三元组G = (𝒩_G, 𝒟_G, ℰ_G)的所有数学性质
    // 构建一个具有完整数学特征的复杂计算图
    
    // 𝒩_G组件1: 数据源层 (展示节点集合的多样性)
    primarySource basic.Start             // 主数据源
    temporalSource basic.GetTimestamp     // 时间数据源
    computeEngine basic.DataProcessor     // 独立计算引擎
    
    // 𝒩_G组件2: 变换层 (展示节点的计算能力)
    logicAnalyzer basic.IsEven           // 逻辑分析器
    textTransformer basic.StringFormatter // 文本变换器
    numericRenderer basic.FormatNumber   // 数值渲染器
    
    // 𝒩_G组件3: 聚合层 (展示复合计算能力)
    knowledgeBuilder basic.CreatePrompt  // 知识构建器
    executionTracker basic.CompletionMarker // 执行跟踪器
}

datas {
    // 𝒟_G组件: 复杂数据流拓扑 (展示数据连接集合的丰富性)
    
    // 主要数据流：时间戳的多路处理
    temporalSource.timestamp -> logicAnalyzer.number;     // 时间→逻辑分析
    temporalSource.timestamp -> numericRenderer.number;   // 时间→数值渲染
    
    // 辅助数据流：ID的多种用途
    primarySource.execution_id -> textTransformer.input;  // ID→文本变换
    primarySource.execution_id -> knowledgeBuilder.name;  // ID→知识命名
    
    // 聚合数据流：处理结果的整合
    textTransformer.formatted -> knowledgeBuilder.content; // 变换结果→知识内容
    
    // 这展示了𝒟_G ⊆ 𝒟且𝒟_G形成有向无环图的性质
}

controls {
    // ℰ_G组件: 复杂控制流拓扑 (展示控制连接集合的协调性)
    
    // 第一波控制：并行启动多个数据源
    primarySource.signal -> temporalSource.trigger;    // 启动时间源
    primarySource.signal -> textTransformer.trigger;   // 启动文本变换
    primarySource.signal -> computeEngine.execute;     // 启动计算引擎
    
    // 第二波控制：基于数据依赖的处理启动
    temporalSource.done -> logicAnalyzer.trigger;     // 时间完成→逻辑分析
    temporalSource.done -> numericRenderer.trigger;   // 时间完成→数值渲染
    
    // 第三波控制：结果聚合和最终化
    logicAnalyzer.done -> knowledgeBuilder.trigger;   // 逻辑完成→知识构建
    knowledgeBuilder.done -> executionTracker.trigger; // 知识完成→执行跟踪
    
    // 这展示了ℰ_G ⊆ ℰ且ℰ_G实现复杂控制协调的性质
}
-- 