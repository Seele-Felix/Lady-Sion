---
description: 
globs: 
alwaysApply: false
---
# AnimaWeave TDD开发指导

## 🎯 开发目标
我正在使用TDD方式开发AnimaWeave DSL解析器。请按照以下标准完成 [测试场景编号] 的开发：

## 📋 工作流程

### 1. **测试设计阶段**
- 在`tests/`目录创建独立的集成测试文件 `t[编号]_[功能名].rs`
- 使用**中文错误消息**和**详细的assert说明**
- 每个测试函数包含：
  - `/// 场景说明` 文档注释
  - 边界情况和错误处理验证
  - 不仅检查数量，还要验证具体内容

### 2. **API设计原则**
- **最小暴露原则**：只暴露必要的公共接口
- **一致的错误处理**：统一使用`ParseError`枚举
- **文档驱动**：每个公共函数都有清晰注释

### 3. **Pest语法规范**
- **WHITESPACE分离**：`WHITESPACE = _{ " " | "\t" }`，`NEWLINE = _{ "\r\n" | "\n" }`
- **Section结构**：`section_end = { "--" ~ NEWLINE? }`
- **验证冲突**：确保选择分支不会导致"cannot fail"错误

### 4. **调试策略**
- **错误消息优先**：通过pest错误消息定位语法问题
- **逐步验证**：单个测试→全部测试→清理代码
- **细节处理**：注意trim()、错误类型匹配等细节
### 5. **代码质量标准**
- **测试分离**：集成测试独立于实现代码
- **中文友好**：错误消息和注释使用中文
- **清理原则**：删除调试代码和无用的单元测试
- **函数命名**：测试函数名简洁明确

## 🔍 验证检查清单
- [ ] 集成测试全部通过
- [ ] 公共API最小化暴露
- [ ] 错误处理完整覆盖
- [ ] 中文错误消息清晰
- [ ] 无调试代码残留
- [ ] Pest语法无冲突警告

## 🚨 常见陷阱避免
1. **不要把所有函数设为pub** - 只暴露核心API
2. **不要在测试中使用println调试** - 用适当的错误处理
3. **不要忽略pest错误消息** - 它们通常指向准确的语法问题
4. **不要忘记trim()处理** - pest可能包含意外的空格
5. **不要混合单元测试和集成测试** - 专注集成测试

## 📝 输出要求
请按此流程完成开发，并在每个阶段说明：
1. 测试设计的考虑点
2. 遇到的技术问题及解决方案
3. API设计的权衡决策
4. 最终的验证结果

现在请开始 [具体测试场景] 的开发。
